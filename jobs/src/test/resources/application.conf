# Copyright 2016 Dennis Vriend
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

twitter {
  #
  # You can create / request / generate your
  # twitter API keys and tokens here: https://apps.twitter.com/
  #
  # First create an application, give it a name and an URL
  # Next you will get access to Twitter and get some keys that must be copied from the web page
  # Next you will want to generate an access token and a token secret.
  # Put your tokens in eg: ~/.bash_profile for safe keeping.
  # application.conf will read the environment variables below
  # to get to your keys and tokens.
  #
  consumerKey = ""
  consumerKey = ${?TWITTER_CONSUMER_KEY}
  consumerSecret = ""
  consumerSecret = ${?TWITTER_CONSUMER_SECRET}
  accessToken = ""
  accessToken = ${?TWITTER_ACCESS_TOKEN}
  accessTokenSecret = ""
  accessTokenSecret = ${?TWITTER_ACCESS_TOKEN_SECRET}
}

akka {
  stdout-loglevel = off // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = off
  loglevel = debug
  log-dead-letters = off
  log-config-on-start = off // Log the complete configuration at INFO level when the actor system is started

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    serialize-messages = off // when on, the akka framework will determine whether or not messages can be serialized, else the plugin

    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = off // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = off // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }
  }

  persistence {
    journal {
      plugin = "jdbc-journal"
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
    }
  }
}

jdbc-journal {
  slick = ${slick}
  slick.db.numThreads = 8
  slick.db.maxConnections = 10
  slick.db.minConnections = 1

  recovery-event-timeout = 60m
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  slick = ${slick}
  slick.db.numThreads = 8
  slick.db.maxConnections = 5
  slick.db.minConnections = 1
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  refresh-interval = "1s"

  max-buffer-size = "100"

  batch-size = "250"

  slick = ${slick}
  slick.db.numThreads = 8
  slick.db.maxConnections = 5
  slick.db.minConnections = 1
}

slick {
  driver = "slick.driver.PostgresDriver$"
  db {
    host = "localhost"
    url = "jdbc:postgresql://localhost:5432/docker?reWriteBatchedInserts=true"
    user = "postgres"
    password = ""
    driver = "org.postgresql.Driver"
    connectionTestQuery = "SELECT 1"
  }
}